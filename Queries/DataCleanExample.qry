<?xml version="1.0"?>
<!DOCTYPE plan SYSTEM "queryplan.dtd">

<!--

	Highway traffic data.
	Select the sensor readings that do not meet the qualifications for good.

-->

<plan top="replacement">


<!--
	Read in the input stream in csv format.
	
	The CSV reader seems to be not very good at this point.
	Attribute names need to match the ones in the header of the CSV file.
	Attribute types seem to be very week at this point. Setting everything to string for now.
-->

<csvstream id="loopdata"
        file_name="../../Streams/FreewayData/freeway_loopdata_6hr.csv"
        attr_names="ts starttime detectorid volume speed occupancy status dqflags" 
        attr_types="TS string string long long long long long"
/>
<!--
<filescan id ="data" isstream="yes" delay="0" filename="../../Streams/trafficDataStreamSmall.xml"/>

<unnest id="detectors" regexp="detectors" datatype="XML" input="data"/>
<unnest id="ts" regexp="time_t" datatype="TS" input="detectors"/>
<unnest id="starttime" regexp="time_s" root="$detectors" datatype="String" input="ts"/>
<unnest id="detector" regexp="detector" root="$detectors" datatype="XML" input="starttime"/>
<unnest id="detectorid" regexp="detector_id" root="$detector" datatype="Integer" input="detector"/>
<unnest id="segmentid" regexp="segment_id" root="$detector" datatype="Integer" input="detectorid"/>
<unnest id="volume" regexp="volume" root="$detector" datatype="Integer" input="segmentid"/>
<unnest id="speed" regexp="speed" root="$detector" datatype="Integer" input="volume"/>
<unnest id="occupancy" regexp="occupancy" root="$detector" datatype="Integer" input="speed"/>
-->
<!--
	Duplicate the loopdata stream.
	
	NOTE: branch is the number of duplicates. If you have more duplicates than streams reading from
	this op, the system seems to go into an infinite loop.

-->

<dup id="dup1" input="loopdata" branch="5"></dup>
<dup id="good" input="good_s" branch="1"></dup>


<!--
	Good Query
-->


<!--
	Filter results where the speed is > 100 or the occupancy is > 95
-->
<select id="occupancy_or_speed" input="dup1" log="no">
	<not>
	<or>
		<pred op="gt">
			<var value="$occupancy"></var><number value="95"></number>
		</pred>
		<pred op="gt">
			<var value="$speed"></var><number value="100"></number>
		</pred>
	</or>
	</not>
</select>

<!--
	Filter the results where the volume is > 0 and the speed is 0
-->
<select id="speed_and_volume_ok_1" input="occupancy_or_speed" log="no">
	<not>
		<and>
			<pred op="eq">
				<var value="$speed"></var><number value="0"></number>
			</pred>
			<pred op="gt">
				<var value="$volume"></var><number value="0"></number>
			</pred>
		</and>
	</not>
</select>

<!--
	Filter the results where the speed is > 0 and the volume is 0
-->
<select id="speed_and_volume_ok_2" input="speed_and_volume_ok_1" log="no">
	<not>
		<and>
			<pred op="gt">
				<var value="$speed"></var><number value="0"></number>
			</pred>
			<pred op="eq">
				<var value="$volume"></var><number value="0"></number>
			</pred>
		</and>
	</not>
</select>


<!--
	Filter the results where the occupancy is > 0 and the volume is 0
-->		
<select id="good_s" input="speed_and_volume_ok_2" log="no">
	<not>
		<and>
			<pred op="gt">
				<var value="$occupancy"></var><number value="0"></number>
			</pred>
			<pred op="eq">
				<var value="$volume"></var><number value="0"></number>
			</pred>
		</and>
	</not>
</select>


<construct id="good_to_union" input="good">
	<![CDATA[
		<result>
		$ts
		$starttime
		$detectorid
		$speed
		$volume
		$occupancy
		</result>
	]]>
</construct>

<!--
	Shift the time by 20
-->
<expression id="shifted" variables="ts" expression="result = ts + 20" input="good"/>

<construct id="good_shifted" input="shifted">
	<![CDATA[
		<result>
		$shifted
		$starttime
		$detectorid
		$speed
		$volume
		$occupancy
		</result>
	]]>
</construct>


<!--
	Bad Query
-->

<!--
	Select results where the speed is > 100 or the occupancy is > 95
-->
<select id="occupancy_or_speed_gt" input="dup1" log="no">
	<or>
		<pred op="gt">
			<var value="$occupancy"></var><number value="95"></number>
		</pred>
		<pred op="gt">
			<var value="$speed"></var><number value="100"></number>
		</pred>
	</or>
</select>

<!--
	Select the results where the volume is > 0 and the speed is 0
-->
<select id="speed_0_and_volume_not_0" input="dup1" log="no">
		<and>
			<pred op="eq">
				<var value="$speed"></var><number value="0"></number>
			</pred>
			<pred op="gt">
				<var value="$volume"></var><number value="0"></number>
			</pred>
		</and>
</select>

<!--
	Select the results where the speed is > 0 and the volume is 0
-->
<select id="volume_0_and_speed_not_0" input="dup1" log="no">
		<and>
			<pred op="gt">
				<var value="$speed"></var><number value="0"></number>
			</pred>
			<pred op="eq">
				<var value="$volume"></var><number value="0"></number>
			</pred>
		</and>
</select>


<!--
	Select the results where the occupancy is > 0 and the volume is 0
-->		
<select id="volume_0_and_occupancy_not_0" input="dup1" log="no">
		<and>
			<pred op="gt">
				<var value="$occupancy"></var><number value="0"></number>
			</pred>
			<pred op="eq">
				<var value="$volume"></var><number value="0"></number>
			</pred>
		</and>
</select>

<!--
	Union all the bad results together.
-->
<union id="bad" input="occupancy_or_speed_gt speed_0_and_volume_not_0 volume_0_and_speed_not_0 volume_0_and_occupancy_not_0"></union>

<!--
	Need to rename before project.
-->
<rename id="bad_r" input="bad" source="ts detectorid" dest="bts did"/>

<construct id="bad_to_join" input="bad_r">
<![CDATA[
<output>
 $bts
 $did
</output>]]>
</construct>

<!--
	Pull the results together
-->

<join id="replacement" input="good_shifted bad_to_join" left="shifted" right="bts">
	<pred op="eq">
		<var value="$did"/><var value="$detectorid"/>
	</pred>
</join>

<construct id="replacement_to_union" input="replacement">
	<![CDATA[
		<result>
		$shifted
		$starttime
		$detectorid
		$speed
		$volume
		$occupancy
		</result>
	]]>
</construct>

<union id="cleaned" input="replacement_to_union good_to_union"/>

</plan>