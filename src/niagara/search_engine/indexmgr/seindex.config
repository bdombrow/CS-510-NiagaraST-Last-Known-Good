#
# *.IDX and inverted files that persist the indices
#
se.index.docmap=./seivl/DOCMAP.IDX

se.index.textlexicon=./seivl/TEXT_LEXICON.IDX
se.index.elemlexicon=./seivl/ELEM_LEXICON.IDX
se.index.dtdlexicon=./seivl/DTD_LEXICON.IDX
se.index.numLexicon=./seivl/NUM_LEXICON.IDX

se.index.textivldir=./seivl/textivl
se.index.elemivldir=./seivl/elemivl
se.index.dtdivldir=./seivl/dtdivl
se.index.numivldir=./seivl/numivl

#
# What kind of storage format to use for the inverted file.
#
# "flat" files store each inverted list in its own file. Each inverted
# list file grows atomatically when the list grows.
#
# "paged" files store all lists in one big paged file.
# When "paged" files are used, the file sizes specified by the options
# "se.*.pagedfilesize" will be the maximum sizes that the indexer will
# use to store the inverted lists. When the lists exceed the sizes
# specified, the behavior is undefined.
#
se.textivldir.structure=paged
se.elemivldir.structure=paged
se.dtdivldir.structure=paged
se.numivldir.structure=paged

#
# The size of a 'paged' inverted file. These options only take effect
# for 'paged' inverted file and are ignored for 'flat' files.
#
# File size in MBytes.
# Page size in bytes.
#
# The size estimation depends on the size of the dataset to be indexed.
# Remember that the size of inverted lists are about the same as the
# dataset size since no compression is done for now.  Some more room 
# needs to be allowed for the internal fragmentation of paged files.
#
se.textivl.pagedfilesize=50
se.elemivl.pagedfilesize=50
se.dtdivl.pagedfilesize=1
se.numivl.pagedfilesize=10

se.index.pagesize=512

#
# How many XML files should be batched up before the inverted lists
# generated from these files are written to disk.
#
# Batching speeds up the index creation, but consumes memory. The
# amount of memory required by batching can be estimated as the
# average size of an XML file times the specified batch level.
# For example, if the average size of an XML file is 10K, and 
# batchlevel=1000, the amount of memory consumed for batching is 
# roughly 10M.
#
se.index.batchlevel=1000

#
# Whether to do full text indexing or partial text indexing.
# Options are: "full", "doc"
#
# For full text indexing, we record position inside a document as
# each occurrence of an index term.  For "doc" text indexing, we
# only record which document a term is in.
#
se.index.type=full


