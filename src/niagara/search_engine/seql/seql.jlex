package niagara.search_engine.seql;


import java_cup.runtime.*;

/**
 * lexical analyser.
 *
 * @author Jaewoo Kang
 *
 */

class SEQLToken {
	int linenum;
	int colnum;
	SEQLToken(int line,int col){
		linenum=line;colnum=col;};
}

class SEQLNumLitToken extends SEQLToken {
	Double numValue;
	SEQLNumLitToken(Double val,int line,int col){
		super(line,col);numValue=val;};
}

class SEQLIdentifierToken extends SEQLToken {
	String idval;
	SEQLIdentifierToken(String text,int line,int col){
		super(line,col);idval=text;};
}

class SEQLStringLitToken extends SEQLToken {
	String stringValue;
	SEQLStringLitToken(String text,int line,int col){
		super(line,col);
		if (text.charAt(0)=='"') 
			stringValue= text.substring(1,text.length()-1);
		else 
			stringValue=text;
	};
/*
	static String toStringValue(String text) {
		StringBuffer charArray = new StringBuffer(text);
		StringBuffer valueArray = new StringBuffer();
		for(int i=1; i<charArray.length()-1; i++) {
			char c = charArray.charAt(i);
			if (c == '\\') {
				switch(charArray.charAt(++i)) {
				case '\'': valueArray.append('\''); break;
				case '\\': valueArray.append('\\'); break;
				default: System.err.println("Shouldn't happen!");
				}
			} else {	
				valueArray.append(c);	
			}	
		}	
		return valueArray.toString();
	}		
*/
}

class SEQLErrorToken extends SEQLToken {
	String errorToken;
	String errorMessage;
	SEQLErrorToken(String token,String message,int line,int col){
		super(line,col);
		errorToken=token;
		errorMessage=message;
	};
}	

class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

%%
Digit=[0-9]
AnyLet=[A-Za-z]
Symbol=[@%_]

%public

// Tell JLex to have yylex() return a Symbol (as will be expected by the parser)
%type Symbol


// Tell JLex what to return when eof of file is hit
%eofval{
return new Symbol(sym.EOF, new  SEQLToken(0,0));
%eofval}


%%
"("	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LPAREN,
			new SEQLToken(Pos.linenum,Pos.colnum));}
")"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RPAREN,
			new SEQLToken(Pos.linenum,Pos.colnum));}
"="	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.EQ,
			new SEQLToken(Pos.linenum,Pos.colnum));}
"<"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LT,
			new SEQLToken(Pos.linenum,Pos.colnum));}
">"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.GT,
			new SEQLToken(Pos.linenum,Pos.colnum));}
"<="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.LEQ,
			new SEQLToken(Pos.linenum,Pos.colnum));}
">="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.GEQ,
			new SEQLToken(Pos.linenum,Pos.colnum));}
","	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COMMA,
			new SEQLToken(Pos.linenum,Pos.colnum));}


[Ee][Xx][Cc][Ee][Pp][Tt] {Pos.setpos(); Pos.col +=6;
		return new Symbol(sym.rw_EXCEPT,
			new SEQLToken(Pos.linenum,Pos.colnum));}
[Ii][Ss]		{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.rw_IS,
			new SEQLToken(Pos.linenum,Pos.colnum));}
[Aa][Nn][Dd]		{Pos.setpos(); Pos.col +=3;
		return new Symbol(sym.rw_AND,
			new SEQLToken(Pos.linenum,Pos.colnum));}
[Oo][Rr]		{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.rw_OR,
			new SEQLToken(Pos.linenum,Pos.colnum));}
[Cc][Oo][Nn][Tt][Aa][Ii][Nn][Ss] {Pos.setpos(); Pos.col +=8;
		return new Symbol(sym.rw_CONTAINS,
			new SEQLToken(Pos.linenum,Pos.colnum));}
[Cc][Oo][Nn][Tt][Aa][Ii][Nn][Ee][Dd][Ii][Nn] {Pos.setpos(); Pos.col +=11;
		return new Symbol(sym.rw_CONTAINEDIN,
			new SEQLToken(Pos.linenum,Pos.colnum));}
[Dd][Ii][Ss][Tt][Aa][Nn][Cc][Ee] {Pos.setpos(); Pos.col +=8;
		return new Symbol(sym.rw_DISTANCE,
			new SEQLToken(Pos.linenum,Pos.colnum));}
[Cc][Oo][Nn][Ff][Oo][Rr][Mm][Ss][Tt][Oo] {Pos.setpos(); Pos.col +=10;
		return new Symbol(sym.rw_CONFORMSTO,
			new SEQLToken(Pos.linenum,Pos.colnum));}



({AnyLet}|{Symbol})({AnyLet}|{Digit}|{Symbol})*	{
	Pos.setpos();  String s=yytext(); Pos.col += s.length();
		  return new Symbol(sym.IDENTIFIER,
				new SEQLIdentifierToken(
					s,
		                    	Pos.linenum,Pos.colnum));}

("+"|"-")?{Digit}+("."{Digit}+)?([Ee]("+"|"-"){Digit}+)? {	
	Pos.setpos(); String s=yytext();Pos.col += s.length();
		  Double dbl = new Double(s);
		  return new Symbol(sym.NUMLIT,
				new SEQLNumLitToken(
					dbl,
		                    	Pos.linenum,Pos.colnum));}

[Hh][Tt][Tt][Pp]"://"([^\000-\037\177\040])+
		{ Pos.setpos(); String s=yytext();Pos.col += s.length();
		return new Symbol(sym.URI,
			new SEQLStringLitToken(
				s,
		               	Pos.linenum,Pos.colnum));}
	

\"(([^\000-\037\177\"\\])|\\\"|\\n|\\t|\\\\)*\" 
	{ Pos.setpos(); String s=yytext();Pos.col += s.length();
		return new Symbol(sym.STRLIT,
			new SEQLStringLitToken(
				s,
		               	Pos.linenum,Pos.colnum));}
	
//[^\n]*	{ Pos.setpos(); Pos.col+=yytext().length(); 
		return yylex();}

##((#)?[^#])*##	{ Pos.setpos(); 
		String s = yytext();
		for(int i=0; i<s.length();i++) {
			if (s.charAt(i) == '\n') {
				Pos.line++; Pos.col=1;
			} else {
				Pos.col++;
			}
		}
		return yylex();}






\"([^\"\n])*\n
		{ Pos.setpos(); Pos.col=1; Pos.line++;
		String s = yytext();
		return new Symbol(sym.error,
			new SEQLErrorToken(
				s.substring(0,s.length()-1),
				"illegal string literal. string ends with new line.",
		               	Pos.linenum,Pos.colnum));}
\"([^\"\n])*\" 
		{ Pos.setpos(); String s=yytext();Pos.col += s.length();
		return new Symbol(sym.error,
			new SEQLErrorToken(
				s,
				"illegal string literal. contains unprintable or illegal escape characters",
		               	Pos.linenum,Pos.colnum));}

##((#)?[^#])*(#)?
		{ Pos.setpos(); 
		String s = yytext();
		for(int i=0; i<s.length();i++) {
			if (s.charAt(i) == '\n') {
				Pos.line++; Pos.col=1;
			} else {
				Pos.col++;
			}
		}
		return new Symbol(sym.error,
			new SEQLErrorToken(
				s.substring(0,s.indexOf('\n'))+"...",
				"runaway multi-line comment",
		               	Pos.linenum,Pos.colnum));}

\n	{Pos.line +=1; Pos.col = 1;}
\t	{Pos.col +=1;}
" "	{Pos.col +=1;}
.	{Pos.setpos();Pos.col +=1; 
		return new Symbol(sym.error,
			new SEQLErrorToken(
				yytext(),
				"invalid character",
		               	Pos.linenum,Pos.colnum));}
	





