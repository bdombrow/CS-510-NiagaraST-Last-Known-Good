
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Thu Feb 23 15:12:40 PST 2012
//----------------------------------------------------

package niagara.xmlql_parser;

import niagara.logical.*;
import niagara.logical.predicates.*;
import niagara.connection_server.InvalidPlanException;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.10j generated parser.
  * @version Thu Feb 23 15:12:40 PST 2012
  */
public class ConstructParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructParser() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\003\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\012\000\002\005\011" +
    "\000\002\006\004\000\002\006\002\000\002\007\005\000" +
    "\002\007\003\000\002\010\005\000\002\011\004\000\002" +
    "\011\003\000\002\011\003\000\002\012\004\000\002\012" +
    "\003\000\002\013\005\000\002\014\004\000\002\015\004" +
    "\000\002\016\005\000\002\016\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\021" +
    "\004\000\002\021\003\000\002\022\005\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\023\005\000" +
    "\002\024\004\000\002\025\004\000\002\025\002\000\002" +
    "\026\006\000\002\026\006\000\002\026\005\000\002\027" +
    "\004\000\002\027\003\000\002\031\005\000\002\032\005" +
    "\000\002\032\003\000\002\030\005\000\002\030\005\000" +
    "\002\030\004\000\002\030\005\000\002\030\003\000\002" +
    "\034\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\004\000\002\036\004\000\002" +
    "\036\002\000\002\037\007\000\002\037\007\000\002\042" +
    "\004\000\002\042\004\000\002\042\002\000\002\040\004" +
    "\000\002\040\002\000\002\041\005\000\002\041\005\000" +
    "\002\041\004\000\002\041\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\005\000" +
    "\002\044\006\000\002\045\004\000\002\046\005\000\002" +
    "\046\003\000\002\050\005\000\002\050\003\000\002\051" +
    "\005\000\002\051\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\006\000\002\047\005\000\002\052\010\000" +
    "\002\052\010\000\002\052\006\000\002\052\006\000\002" +
    "\053\006\000\002\053\005\000\002\053\003\000\002\053" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\012\004\016\014\004\033\005\046\011\001" +
    "\002\000\006\014\004\033\005\001\002\000\020\004\127" +
    "\012\126\031\125\045\116\046\123\047\114\050\122\001" +
    "\002\000\016\002\uffec\004\uffec\014\uffec\015\uffec\033\uffec" +
    "\046\uffec\001\002\000\006\034\105\037\103\001\002\000" +
    "\016\002\ufff4\004\ufff4\014\004\015\ufff4\033\ufff4\046\ufff4" +
    "\001\002\000\016\002\uffeb\004\uffeb\014\uffeb\015\uffeb\033" +
    "\uffeb\046\uffeb\001\002\000\016\002\ufff5\004\ufff5\014\004" +
    "\015\ufff5\033\ufff5\046\ufff5\001\002\000\016\004\065\014" +
    "\004\033\005\045\063\046\011\047\062\001\002\000\016" +
    "\002\uffea\004\uffea\014\uffea\015\uffea\033\uffea\046\uffea\001" +
    "\002\000\016\002\ufff2\004\ufff2\014\ufff2\015\ufff2\033\ufff2" +
    "\046\ufff2\001\002\000\006\045\022\046\021\001\002\000" +
    "\004\002\020\001\002\000\004\002\001\001\002\000\010" +
    "\005\uffba\044\054\045\uffba\001\002\000\010\005\uffba\044" +
    "\024\045\uffba\001\002\000\010\005\052\044\043\045\044" +
    "\001\002\000\010\045\030\046\025\050\026\001\002\000" +
    "\010\005\uff97\044\uff97\045\uff97\001\002\000\010\005\uff98" +
    "\044\uff98\045\uff98\001\002\000\010\005\uffba\044\uffba\045" +
    "\uffba\001\002\000\004\012\031\001\002\000\006\013\033" +
    "\046\032\001\002\000\010\013\uffa7\017\uffa7\034\uffa7\001" +
    "\002\000\010\005\uff99\044\uff99\045\uff99\001\002\000\006" +
    "\013\036\017\035\001\002\000\004\046\037\001\002\000" +
    "\010\005\uff9a\044\uff9a\045\uff9a\001\002\000\010\013\uffa8" +
    "\017\uffa8\034\uffa8\001\002\000\010\005\041\044\043\045" +
    "\044\001\002\000\016\004\uff9e\014\uff9e\033\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\001\002\000\010\005\uffbb\044\uffbb\045" +
    "\uffbb\001\002\000\006\046\050\050\051\001\002\000\004" +
    "\006\045\001\002\000\006\046\046\050\047\001\002\000" +
    "\010\005\uffb8\044\uffb8\045\uffb8\001\002\000\010\005\uffb9" +
    "\044\uffb9\045\uffb9\001\002\000\010\005\uffb6\044\uffb6\045" +
    "\uffb6\001\002\000\010\005\uffb7\044\uffb7\045\uffb7\001\002" +
    "\000\016\004\uff9c\014\uff9c\033\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\001\002\000\010\005\060\044\043\045\044\001\002" +
    "\000\010\045\030\046\025\050\026\001\002\000\010\005" +
    "\uffba\044\uffba\045\uffba\001\002\000\010\005\057\044\043" +
    "\045\044\001\002\000\016\004\uff9d\014\uff9d\033\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\001\002\000\016\004\uff9b\014\uff9b" +
    "\033\uff9b\045\uff9b\046\uff9b\047\uff9b\001\002\000\012\004" +
    "\065\014\004\033\005\046\011\001\002\000\004\004\074" +
    "\001\002\000\004\004\074\001\002\000\016\002\uffe6\004" +
    "\uffe6\014\uffe6\015\uffe6\033\uffe6\046\uffe6\001\002\000\010" +
    "\016\067\045\022\046\021\001\002\000\012\004\uffe4\014" +
    "\uffe4\033\uffe4\046\uffe4\001\002\000\006\005\070\045\071" +
    "\001\002\000\024\002\uffab\004\uffab\014\uffab\015\uffab\032" +
    "\uffab\033\uffab\035\uffab\036\uffab\046\uffab\001\002\000\004" +
    "\005\072\001\002\000\024\002\uffaa\004\uffaa\014\uffaa\015" +
    "\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa\046\uffaa\001\002" +
    "\000\016\002\uffe8\004\uffe8\014\uffe8\015\uffe8\033\uffe8\046" +
    "\uffe8\001\002\000\004\016\067\001\002\000\016\002\uffe7" +
    "\004\uffe7\014\uffe7\015\uffe7\033\uffe7\046\uffe7\001\002\000" +
    "\016\002\uffe9\004\uffe9\014\uffe9\015\uffe9\033\uffe9\046\uffe9" +
    "\001\002\000\012\004\uffe5\014\uffe5\033\uffe5\046\uffe5\001" +
    "\002\000\016\002\ufff3\004\ufff3\014\ufff3\015\ufff3\033\ufff3" +
    "\046\ufff3\001\002\000\016\002\ufff6\004\ufff6\014\004\015" +
    "\ufff6\033\ufff6\046\ufff6\001\002\000\004\034\110\001\002" +
    "\000\004\046\032\001\002\000\016\002\ufff0\004\ufff0\014" +
    "\ufff0\015\ufff0\033\ufff0\046\ufff0\001\002\000\012\004\016" +
    "\014\004\033\005\046\011\001\002\000\016\002\uffed\004" +
    "\uffed\014\uffed\015\uffed\033\uffed\046\uffed\001\002\000\006" +
    "\017\035\034\uffa9\001\002\000\012\004\016\014\004\033" +
    "\005\046\011\001\002\000\016\002\uffee\004\uffee\014\uffee" +
    "\015\uffee\033\uffee\046\uffee\001\002\000\014\017\uffe0\027" +
    "\165\030\164\034\uffe0\037\uffe0\001\002\000\014\004\243" +
    "\045\116\046\162\047\114\050\122\001\002\000\032\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd" +
    "\017\uffcd\027\uffcd\030\uffcd\034\uffcd\037\uffcd\001\002\000" +
    "\004\032\213\001\002\000\032\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\013\uffcc\017\uffcc\027\uffcc\030" +
    "\uffcc\034\uffcc\037\uffcc\001\002\000\016\013\uffcf\017\uffcf" +
    "\027\uffcf\030\uffcf\034\uffcf\037\uffcf\001\002\000\010\017" +
    "\211\034\uffef\037\uffef\001\002\000\010\017\uffe2\034\uffe2" +
    "\037\uffe2\001\002\000\032\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\013\uffca\017\uffca\027\uffca\030\uffca" +
    "\034\uffca\037\uffca\001\002\000\020\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\032\201\001\002\000\016" +
    "\004\172\005\174\006\171\007\176\010\175\011\177\001" +
    "\002\000\016\012\126\031\125\045\116\046\162\047\114" +
    "\050\122\001\002\000\016\012\126\031\125\045\116\046" +
    "\162\047\114\050\122\001\002\000\016\012\133\026\135" +
    "\042\136\043\131\045\134\046\130\001\002\000\010\005" +
    "\uffbc\044\151\045\uffbc\001\002\000\024\005\uffad\013\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\025\uffad\044\uffad\045" +
    "\uffad\001\002\000\022\005\uffbc\020\145\021\144\022\143" +
    "\023\140\025\142\044\151\045\uffbc\001\002\000\014\012" +
    "\133\026\135\042\136\043\131\045\134\001\002\000\024" +
    "\005\uffaf\013\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025" +
    "\uffaf\044\uffaf\045\uffaf\001\002\000\024\005\uffac\013\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac\044\uffac\045" +
    "\uffac\001\002\000\024\005\uffae\013\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\025\uffae\044\uffae\045\uffae\001\002\000" +
    "\016\013\141\020\145\021\144\022\143\023\140\025\142" +
    "\001\002\000\024\005\uffb5\013\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\025\uffb5\044\uffb5\045\uffb5\001\002\000\024" +
    "\005\uffb0\013\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025" +
    "\uffb0\044\uffb0\045\uffb0\001\002\000\014\012\133\026\135" +
    "\042\136\043\131\045\134\001\002\000\024\005\uffb4\013" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\044\uffb4" +
    "\045\uffb4\001\002\000\024\005\uffb3\013\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\025\uffb3\044\uffb3\045\uffb3\001\002" +
    "\000\014\012\133\026\135\042\136\043\131\045\134\001" +
    "\002\000\024\005\uffb2\013\uffb2\020\uffb2\021\144\022\143" +
    "\023\140\025\uffb2\044\uffb2\045\uffb2\001\002\000\024\005" +
    "\uffb1\013\uffb1\020\145\021\144\022\143\023\140\025\uffb1" +
    "\044\uffb1\045\uffb1\001\002\000\010\005\uffba\044\uffba\045" +
    "\uffba\001\002\000\006\046\152\050\153\001\002\000\010" +
    "\005\uffbd\044\uffbd\045\uffbd\001\002\000\010\005\uffbe\044" +
    "\uffbe\045\uffbe\001\002\000\010\005\155\044\043\045\044" +
    "\001\002\000\014\004\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\001\002\000\010\005\uffba\044\uffba\045\uffba\001\002" +
    "\000\010\005\160\044\043\045\044\001\002\000\014\004" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\001\002\000\010" +
    "\013\163\027\165\030\164\001\002\000\032\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\017\uffcb" +
    "\027\uffcb\030\uffcb\034\uffcb\037\uffcb\001\002\000\016\013" +
    "\uffd0\017\uffd0\027\uffd0\030\uffd0\034\uffd0\037\uffd0\001\002" +
    "\000\016\012\126\031\125\045\116\046\162\047\114\050" +
    "\122\001\002\000\016\012\126\031\125\045\116\046\162" +
    "\047\114\050\122\001\002\000\016\013\uffd2\017\uffd2\027" +
    "\uffd2\030\164\034\uffd2\037\uffd2\001\002\000\016\013\uffd3" +
    "\017\uffd3\027\uffd3\030\uffd3\034\uffd3\037\uffd3\001\002\000" +
    "\016\013\uffd1\017\uffd1\027\uffd1\030\uffd1\034\uffd1\037\uffd1" +
    "\001\002\000\012\045\uffc4\046\uffc4\047\uffc4\050\uffc4\001" +
    "\002\000\012\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002" +
    "\000\012\045\116\046\162\047\114\050\122\001\002\000" +
    "\012\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\012" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002\000\012\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000\012\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\001\002\000\016\013\uffce\017" +
    "\uffce\027\uffce\030\uffce\034\uffce\037\uffce\001\002\000\004" +
    "\014\202\001\002\000\004\045\205\001\002\000\010\017" +
    "\uffdf\034\uffdf\037\uffdf\001\002\000\006\015\207\017\206" +
    "\001\002\000\006\015\uffd4\017\uffd4\001\002\000\004\045" +
    "\210\001\002\000\010\017\uffd6\034\uffd6\037\uffd6\001\002" +
    "\000\006\015\uffd5\017\uffd5\001\002\000\020\004\127\012" +
    "\126\031\125\045\116\046\123\047\114\050\122\001\002" +
    "\000\010\017\uffe3\034\uffe3\037\uffe3\001\002\000\012\014" +
    "\221\045\225\046\220\050\223\001\002\000\012\017\uffdc" +
    "\034\uffdc\037\uffdc\040\216\001\002\000\010\017\uffe1\034" +
    "\uffe1\037\uffe1\001\002\000\004\050\217\001\002\000\010" +
    "\017\uffdd\034\uffdd\037\uffdd\001\002\000\016\013\uffa2\015" +
    "\uffa2\017\uffa2\034\uffa2\037\uffa2\040\uffa2\001\002\000\010" +
    "\045\225\046\220\050\223\001\002\000\012\017\uffde\034" +
    "\uffde\037\uffde\040\uffde\001\002\000\016\013\uffa1\015\uffa1" +
    "\017\uffa1\034\uffa1\037\uffa1\040\uffa1\001\002\000\012\017" +
    "\uffa5\034\uffa5\037\uffa5\040\uffa5\001\002\000\004\012\226" +
    "\001\002\000\012\013\227\045\225\046\220\050\223\001" +
    "\002\000\016\013\uff9f\015\uff9f\017\uff9f\034\uff9f\037\uff9f" +
    "\040\uff9f\001\002\000\006\013\233\017\232\001\002\000" +
    "\010\013\uffa3\015\uffa3\017\uffa3\001\002\000\010\045\225" +
    "\046\220\050\223\001\002\000\016\013\uffa0\015\uffa0\017" +
    "\uffa0\034\uffa0\037\uffa0\040\uffa0\001\002\000\010\013\uffa4" +
    "\015\uffa4\017\uffa4\001\002\000\006\015\236\017\232\001" +
    "\002\000\012\017\uffa6\034\uffa6\037\uffa6\040\uffa6\001\002" +
    "\000\004\004\243\001\002\000\004\004\uffd7\001\002\000" +
    "\012\004\uffc1\032\uffc1\035\247\036\245\001\002\000\004" +
    "\004\074\001\002\000\020\012\133\016\067\026\135\042" +
    "\136\043\131\045\134\046\130\001\002\000\012\004\uffc1" +
    "\032\uffc1\035\247\036\245\001\002\000\004\046\251\001" +
    "\002\000\006\004\uffda\032\uffda\001\002\000\004\046\250" +
    "\001\002\000\006\004\uffc3\032\uffc3\001\002\000\006\004" +
    "\uffc2\032\uffc2\001\002\000\006\004\uffd9\032\uffd9\001\002" +
    "\000\012\004\uffc1\032\uffc1\035\247\036\245\001\002\000" +
    "\004\004\uffd8\001\002\000\006\004\uffdb\032\uffdb\001\002" +
    "\000\004\015\257\001\002\000\016\002\ufff1\004\ufff1\014" +
    "\ufff1\015\ufff1\033\ufff1\046\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\022\011\013\012\011\013\014\014\007\015" +
    "\006\017\016\020\005\052\012\001\001\000\014\011\255" +
    "\012\011\013\014\014\007\015\006\001\001\000\020\022" +
    "\117\023\120\026\114\030\111\033\123\034\116\037\112" +
    "\001\001\000\002\001\001\000\006\016\103\045\101\001" +
    "\001\000\006\012\100\013\014\001\001\000\002\001\001" +
    "\000\004\013\077\001\001\000\026\011\013\012\011\013" +
    "\014\014\007\015\006\017\065\020\005\021\060\044\063" +
    "\052\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\052\001\001\000\004\040\022\001\001\000\004\041" +
    "\041\001\001\000\004\053\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\037\001\001\000\002\001" +
    "\001\000\004\046\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\041\001\001\000\004\053\054\001\001\000\004" +
    "\040\055\001\001\000\004\041\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\011\013\012\011\013\014" +
    "\014\007\015\006\017\076\020\005\044\075\052\012\001" +
    "\001\000\004\044\074\001\001\000\004\044\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\077\001\001\000\002\001\001\000\004\046" +
    "\106\001\001\000\002\001\001\000\022\011\013\012\011" +
    "\013\014\014\007\015\006\017\105\020\005\052\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\013" +
    "\012\011\013\014\014\007\015\006\017\110\020\005\052" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\237\027\236\033\241\037\112\044\240\001\001\000" +
    "\002\001\001\000\004\024\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\172\001\001" +
    "\000\010\030\167\033\123\034\116\001\001\000\010\030" +
    "\160\033\123\034\116\001\001\000\004\043\131\001\001" +
    "\000\004\042\155\001\001\000\002\001\001\000\004\042" +
    "\147\001\001\000\004\043\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\041\001\001\000\002\001\001\000\004" +
    "\040\156\001\001\000\004\041\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\166\033\123\034\116\001\001\000\010\030" +
    "\165\033\123\034\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\202\001\001\000\004\032\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\211\026\114\030\111\033\123\034\116\037\112\001" +
    "\001\000\002\001\001\000\006\047\223\050\221\001\001" +
    "\000\004\025\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\230" +
    "\051\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\230\051\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\253\037\112\044\252\001\001\000\002\001\001\000\004" +
    "\036\251\001\001\000\004\044\243\001\001\000\004\043" +
    "\131\001\001\000\004\036\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) 
  {
 	StringBuffer m = new StringBuffer("Error");

   	 if ( info instanceof java_cup.runtime.Symbol ) {
        	java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
       		if (s.left >= 0) {
        	 m.append(" in line "+(s.left+1));
         
        	 if (s.right >= 0)
          	 m.append(", column "+(s.right+1));
                 if (s.value == null)
                   m.append(", value NULL");
                 else 
		   m.append(", value "+s.value.toString());
		 m.append(", sym "+s.sym);
     	  }
     	}
     
   	m.append(" : "+message);
     	System.err.println(m);
   }
   
   public void report_fatal_error(String message, Object info) throws Exception
   {
     report_error(message, info);
     throw new InvalidPlanException("Irrecoverable Parse Error. Check query syntax");
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructParser$actions {
  private final ConstructParser parser;

  /** Constructor */
  CUP$ConstructParser$actions(ConstructParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ConstructParser$do_action(
    int                        CUP$ConstructParser$act_num,
    java_cup.runtime.lr_parser CUP$ConstructParser$parser,
    java.util.Stack            CUP$ConstructParser$stack,
    int                        CUP$ConstructParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructParser$result;

      /* select the action based on the action number */
      switch (CUP$ConstructParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SkolemOrIdAttr ::= VAR 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr("id",new data(dataType.VAR,v)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(41/*SkolemOrIdAttr*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SkolemOrIdAttr ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr("id",new data(dataType.STRING,s)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(41/*SkolemOrIdAttr*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SkolemOrIdAttr ::= IDEN LPAREN RPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		 RESULT = new skolem(s, new Vector()); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(41/*SkolemOrIdAttr*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SkolemOrIdAttr ::= IDEN LPAREN VarList RPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector vl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = new skolem(s, vl); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(41/*SkolemOrIdAttr*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // StartTag ::= LT VAR AttributeList GT 
            {
              startTag RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = new startTag(new data(dataType.VAR, v), null, al); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(40/*StartTag*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // StartTag ::= LT IDEN AttributeList GT 
            {
              startTag RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = new startTag(new data(dataType.IDEN, i), null, al); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(40/*StartTag*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StartTag ::= LT VAR IDEQ SkolemOrIdAttr AttributeList GT 
            {
              startTag RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 if (!(s instanceof skolem)) { 
		      al.insertElementAt(s, 0); s = null;
		   }
           RESULT = new startTag(new data(dataType.VAR, v), (skolem) s, al); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(40/*StartTag*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StartTag ::= LT IDEN IDEQ SkolemOrIdAttr AttributeList GT 
            {
              startTag RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 if (!(s instanceof skolem)) { 
		      al.insertElementAt(s, 0); s = null;
		   }
		   RESULT = new startTag(new data(dataType.IDEN, i), (skolem) s, al); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(40/*StartTag*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DataSource ::= IDEN LPAREN RPAREN 
            {
              data RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(37/*DataSource*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DataSource ::= IDEN LPAREN DataSourceList RPAREN 
            {
              data RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(37/*DataSource*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DataSource ::= STRING 
            {
              data RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new data(dataType.STRING, s); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(37/*DataSource*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DataSource ::= VAR 
            {
              data RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new data(dataType.VAR, v); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(37/*DataSource*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DataSourceList ::= DataSource 
            {
              Vector RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		data d = (data)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(d); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(39/*DataSourceList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DataSourceList ::= DataSourceList COMMA DataSource 
            {
              Vector RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Vector dl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		data d = (data)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 dl.addElement(d); RESULT = dl; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(39/*DataSourceList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DataSourceSet ::= DataSource 
            {
              Vector RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		data d = (data)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(d); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(38/*DataSourceSet*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DataSourceSet ::= LBRACE DataSourceList RBRACE 
            {
              Vector RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector dl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = dl; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(38/*DataSourceSet*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VarList ::= VAR 
            {
              Vector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(v); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(36/*VarList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VarList ::= VarList COMMA VAR 
            {
              Vector RESULT = null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Vector vl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 vl.addElement(v); RESULT = vl; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(36/*VarList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OrderedBy ::= ORDERED_BY VarList 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(35/*OrderedBy*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EndTag ::= LT SLASH IDEN GT 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(34/*EndTag*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EndTag ::= LT SLASH GT 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(34/*EndTag*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RegularExpression ::= DOLLAR 
            {
              regExp RESULT = null;
		 RESULT = new regExpOpNode(opType.DOLLAR); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RegularExpression ::= ID 
            {
              regExp RESULT = null;
		 RESULT = new regExpDataNode(new data(dataType.IDEN,"id")); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RegularExpression ::= END 
            {
              regExp RESULT = null;
		 RESULT = new regExpDataNode(new data(dataType.IDEN,"end")); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RegularExpression ::= IDEN 
            {
              regExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new regExpDataNode(new data(dataType.IDEN,i)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RegularExpression ::= LPAREN RegularExpression RPAREN 
            {
              regExp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		regExp r = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = r; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RegularExpression ::= RegularExpression BAR RegularExpression 
            {
              regExp RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		regExp r1 = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		regExp r2 = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new regExpOpNode(opType.BAR, r1, r2); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RegularExpression ::= RegularExpression DOT RegularExpression 
            {
              regExp RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		regExp r1 = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		regExp r2 = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new regExpOpNode(opType.DOT, r1, r2); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RegularExpression ::= RegularExpression QMARK 
            {
              regExp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		regExp r = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = new regExpOpNode(opType.QMARK, r); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RegularExpression ::= RegularExpression PLUS 
            {
              regExp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		regExp r = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = new regExpOpNode(opType.PLUS, r); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RegularExpression ::= RegularExpression STAR 
            {
              regExp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		regExp r = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = new regExpOpNode(opType.STAR, r); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(33/*RegularExpression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Attribute ::= IDEQ VAR 
            {
              attr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr("id",new data(dataType.VAR,v)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(31/*Attribute*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Attribute ::= IDEQ STRING 
            {
              attr RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr("id",new data(dataType.STRING,s)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(31/*Attribute*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Attribute ::= IDEN EQ VAR 
            {
              attr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr(i,new data(dataType.VAR,v)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(31/*Attribute*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Attribute ::= IDEN EQ STRING 
            {
              attr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr(i,new data(dataType.STRING,s)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(31/*Attribute*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AttributeList ::= 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(30/*AttributeList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AttributeList ::= AttributeList Attribute 
            {
              Vector RESULT = null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		attr a = (attr)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 al.addElement(a); RESULT=al; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(30/*AttributeList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Ids ::= 
            {
              attr RESULT = null;
		 RESULT = null; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(32/*Ids*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Ids ::= IDEQ VAR 
            {
              attr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr(new String("ID"),new data(dataType.VAR,v)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(32/*Ids*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Ids ::= IDEQ STRING 
            {
              attr RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new attr(new String("ID"),new data(dataType.STRING,s)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(32/*Ids*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StartTagPattern ::= LT VAR Ids AttributeList GT 
            {
              stp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		attr i = (attr)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 if(i != null)
		              al.addElement(i);	
			   RESULT = new stp(new regExpDataNode(new data(dataType.VAR, v)), al); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(29/*StartTagPattern*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StartTagPattern ::= LT RegularExpression Ids AttributeList GT 
            {
              stp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).right;
		regExp r = (regExp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		attr i = (attr)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 if(i != null)
		              al.addElement(i);	
			   RESULT = new stp(r, al); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(29/*StartTagPattern*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BindingAs ::= 
            {
              data RESULT = null;
		 RESULT = null; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(28/*BindingAs*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BindingAs ::= CONTENT_AS VAR 
            {
              data RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new data(dataType.CONTENT_AS, v); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(28/*BindingAs*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BindingAs ::= ELEMENT_AS VAR 
            {
              data RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new data(dataType.ELEMENT_AS, v); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(28/*BindingAs*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OpRel ::= EQ 
            {
              Integer RESULT = null;
		 RESULT = new Integer(opType.EQ); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(27/*OpRel*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OpRel ::= NEQ 
            {
              Integer RESULT = null;
		 RESULT = new Integer(opType.NEQ); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(27/*OpRel*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OpRel ::= GEQ 
            {
              Integer RESULT = null;
		 RESULT = new Integer(opType.GEQ); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(27/*OpRel*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OpRel ::= LEQ 
            {
              Integer RESULT = null;
		 RESULT = new Integer(opType.LEQ); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(27/*OpRel*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OpRel ::= GT 
            {
              Integer RESULT = null;
		 RESULT = new Integer(opType.GT); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(27/*OpRel*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OpRel ::= LT 
            {
              Integer RESULT = null;
		 RESULT = new Integer(opType.LT); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(27/*OpRel*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= STRING 
            {
              Atom RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new StringConstant(s); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(25/*Expression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= VAR 
            {
              Atom RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new OldVariable(v); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(25/*Expression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= IDEN 
            {
              Atom RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new StringConstant(i); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(25/*Expression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= NUMBER 
            {
              Atom RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new NumericConstant(n); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(25/*Expression*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BoolExp ::= Expression OpRel Expression 
            {
              Predicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Atom e1 = (Atom)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Atom e2 = (Atom)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		  RESULT = Comparison.newComparison(o.intValue(), e1, e2); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(26/*BoolExp*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Predicate ::= BoolExp 
            {
              Predicate RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Predicate b = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = b; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(22/*Predicate*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Predicate ::= LPAREN Predicate RPAREN 
            {
              Predicate RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = p; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(22/*Predicate*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Predicate ::= NOT Predicate 
            {
              Predicate RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Not(p); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(22/*Predicate*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Predicate ::= Predicate OR Predicate 
            {
              Predicate RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Predicate p1 = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Predicate p2 = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Or(p1, p2); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(22/*Predicate*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Predicate ::= Predicate AND Predicate 
            {
              Predicate RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Predicate p1 = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Predicate p2 = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new And(p1, p2); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(22/*Predicate*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SetElemList ::= IDEN 
            {
              Vector RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(new data(dataType.IDEN,i)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(24/*SetElemList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SetElemList ::= SetElemList COMMA IDEN 
            {
              Vector RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 sl.addElement(new data(dataType.IDEN,i)); RESULT = sl; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(24/*SetElemList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Sets ::= LBRACE SetElemList RBRACE 
            {
              Vector RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = sl; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(23/*Sets*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PatternList ::= Pattern 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		pattern p = (pattern)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(p); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(21/*PatternList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PatternList ::= PatternList Pattern 
            {
              Vector RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector pl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		pattern p = (pattern)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 pl.addElement(p); RESULT = pl; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(21/*PatternList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Pattern ::= StartTagPattern EndTag BindingAs 
            {
              pattern RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		stp s = (stp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		data b = (data)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new patternLeafNode(s.getRegExp(), s.getAttrList(), b); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(20/*Pattern*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Pattern ::= StartTagPattern Expression EndTag BindingAs 
            {
              pattern RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).right;
		stp s = (stp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Atom e = (Atom)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		data b = (data)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new patternLeafNode(s.getRegExp(), s.getAttrList(), e, b); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(20/*Pattern*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Pattern ::= StartTagPattern PatternList EndTag BindingAs 
            {
              pattern RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).right;
		stp s = (stp)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Vector pl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		data b = (data)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new patternInternalNode(s.getRegExp(), s.getAttrList(), pl, b); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(20/*Pattern*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ConfirmToClause ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(19/*ConfirmToClause*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConfirmToClause ::= CONFORM_TO STRING 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = s; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(19/*ConfirmToClause*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InClause ::= IN DataSourceSet 
            {
              Vector RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Vector d = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = d; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(18/*InClause*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Condition ::= VAR IN Sets 
            {
              condition RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new set(v,s); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(17/*Condition*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Condition ::= Predicate 
            {
              condition RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = p; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(17/*Condition*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condition ::= Pattern InClause ConfirmToClause 
            {
              condition RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		pattern p = (pattern)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new inClause(p, i, c); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(17/*Condition*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConditionList ::= Condition 
            {
              Vector RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		condition c = (condition)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(c); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(16/*ConditionList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ConditionList ::= ConditionList COMMA Condition 
            {
              Vector RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Vector cl = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		condition c = (condition)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 cl.addElement(c); RESULT = cl; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(16/*ConditionList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // QueryInConstructList ::= QueryInConstruct 
            {
              Vector RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		constructBaseNode q = (constructBaseNode)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(q); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(15/*QueryInConstructList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // QueryInConstructList ::= QueryInConstructList QueryInConstruct 
            {
              Vector RESULT = null;
		int qlleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int qlright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector ql = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		constructBaseNode q = (constructBaseNode)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 ql.addElement(q); RESULT = ql; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(15/*QueryInConstructList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Element ::= StartTag EndTag 
            {
              constructBaseNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		startTag s = (startTag)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		
			Vector v1 = new Vector();
			RESULT = new constructInternalNode(s,v1);
		
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(14/*Element*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Element ::= StartTag NUMBER EndTag 
            {
              constructBaseNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		startTag s = (startTag)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		
			Vector v1 = new Vector();
			v1.addElement(new constructLeafNode(new data(dataType.STRING,i)));
			RESULT = new constructInternalNode(s,v1);
		
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(14/*Element*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Element ::= StartTag IDEN EndTag 
            {
              constructBaseNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		startTag s = (startTag)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		
			Vector v1 = new Vector();
			v1.addElement(new constructLeafNode(new data(dataType.IDEN,i)));
			RESULT = new constructInternalNode(s,v1);
		
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(14/*Element*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Element ::= StartTag QueryInConstructList EndTag 
            {
              constructBaseNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		startTag s = (startTag)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int qlleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int qlright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector ql = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		 RESULT = new constructInternalNode(s, ql); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(14/*Element*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // QueryInConstruct ::= QueryBlock 
            {
              constructBaseNode RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(13/*QueryInConstruct*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // QueryInConstruct ::= VAR 
            {
              constructBaseNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new constructLeafNode(new data(dataType.VAR,v)); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(13/*QueryInConstruct*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // QueryInConstruct ::= Element 
            {
              constructBaseNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		constructBaseNode e = (constructBaseNode)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = e; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(13/*QueryInConstruct*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstructPart ::= CONSTRUCT QueryInConstruct 
            {
              constructBaseNode RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		constructBaseNode q = (constructBaseNode)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = q; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(12/*ConstructPart*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstructPart ::= OrderedBy CONSTRUCT QueryInConstruct 
            {
              constructBaseNode RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(12/*ConstructPart*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // WherePart ::= WHERE ConditionList 
            {
              Vector RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = c; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(11/*WherePart*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Query ::= WherePart ConstructPart 
            {
              query RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		Vector w = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		constructBaseNode c = (constructBaseNode)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new query(w, c); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(10/*Query*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SubBlock ::= LBRACE QueryBlock RBRACE 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(9/*SubBlock*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SubBlockList ::= SubBlock 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(8/*SubBlockList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SubBlockList ::= SubBlockList SubBlock 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(8/*SubBlockList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // QueryBlock ::= Query 
            {
              query RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		query q = (query)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = q; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(7/*QueryBlock*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // QueryBlock ::= SubBlockList 
            {
              query RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(7/*QueryBlock*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // QueryBlock ::= Query SubBlockList 
            {
              query RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(7/*QueryBlock*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Arg ::= VAR COLON STRING 
            {
              arg RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new arg(v,s); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(6/*Arg*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ArgList ::= Arg 
            {
              Vector RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		arg a = (arg)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = new Vector(); RESULT.addElement(a); 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(5/*ArgList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ArgList ::= ArgList COMMA Arg 
            {
              Vector RESULT = null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).right;
		Vector al = (Vector)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		arg a = (arg)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 if(al.contains(a)) 
			System.out.println("error");
		   else {
			al.addElement(a);
			RESULT=al;
		   }
		
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(5/*ArgList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ReturnType ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(4/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ReturnType ::= COLON STRING 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = s; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(4/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Func ::= FUNCTION IDEN LPAREN RPAREN ReturnType QueryBlock END 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(3/*Func*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Func ::= FUNCTION IDEN LPAREN ArgList RPAREN ReturnType QueryBlock END 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(3/*Func*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncList ::= 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(2/*FuncList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FuncList ::= FuncList Func 
            {
              Object RESULT = null;

              CUP$ConstructParser$result = new java_cup.runtime.Symbol(2/*FuncList*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Xmlql ::= FuncList QueryBlock 
            {
              query RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right;
		query q = (query)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).value;
		 RESULT = q; 
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(1/*Xmlql*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          return CUP$ConstructParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= QueryInConstruct EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).right;
		constructBaseNode start_val = (constructBaseNode)((java_cup.runtime.Symbol) CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).value;
		RESULT = start_val;
              CUP$ConstructParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConstructParser$stack.elementAt(CUP$ConstructParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructParser$parser.done_parsing();
          return CUP$ConstructParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

